'use strict';var cov_wussshu9o=function(){var path="/Users/skinyori/Documents/workspace/interview/recruit-05-19-ph2/models/user.js";var hash="2c7ef84719a605b139880f95ef14c47363a9d5a5";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/Users/skinyori/Documents/workspace/interview/recruit-05-19-ph2/models/user.js",statementMap:{"0":{start:{line:2,column:0},end:{line:39,column:2}},"1":{start:{line:3,column:17},end:{line:29,column:10}},"2":{start:{line:30,column:4},end:{line:32,column:7}},"3":{start:{line:31,column:8},end:{line:31,column:92}},"4":{start:{line:35,column:4},end:{line:37,column:6}},"5":{start:{line:36,column:8},end:{line:36,column:59}},"6":{start:{line:38,column:4},end:{line:38,column:16}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:2,column:17},end:{line:2,column:18}},loc:{start:{line:2,column:43},end:{line:39,column:1}},line:2},"1":{name:"(anonymous_1)",decl:{start:{line:30,column:22},end:{line:30,column:23}},loc:{start:{line:30,column:32},end:{line:32,column:5}},line:30},"2":{name:"(anonymous_2)",decl:{start:{line:35,column:35},end:{line:35,column:36}},loc:{start:{line:35,column:55},end:{line:37,column:5}},line:35}},branchMap:{},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0},f:{"0":0,"1":0,"2":0},b:{},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"2c7ef84719a605b139880f95ef14c47363a9d5a5"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();cov_wussshu9o.s[0]++;module.exports=(sequelize,DataTypes)=>{cov_wussshu9o.f[0]++;const user=(cov_wussshu9o.s[1]++,sequelize.define('user',{username:{type:DataTypes.STRING,allowNull:false,unique:true},role:{type:DataTypes.ENUM({values:['Retailer','WareHouseAttendant']}),allowNull:false},password:{type:DataTypes.STRING,allowNull:false},createdAt:{allowNull:false,type:DataTypes.DATE,defaultValue:sequelize.fn('NOW')},updatedAt:{allowNull:false,type:DataTypes.DATE,defaultValue:sequelize.fn('NOW')}},{}));cov_wussshu9o.s[2]++;user.beforeCreate(user=>{cov_wussshu9o.f[1]++;cov_wussshu9o.s[3]++;return user.password=bcrypt.hashSync(user.password,bcrypt.genSaltSync(10),null);});//This will check if an unhashed password entered by the
//user can be compared to the hashed password stored in our database
cov_wussshu9o.s[4]++;user.prototype.validPassword=function(password){cov_wussshu9o.f[2]++;cov_wussshu9o.s[5]++;return bcrypt.compareSync(password,this.password);};cov_wussshu9o.s[6]++;return user;};